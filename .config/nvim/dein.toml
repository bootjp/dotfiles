
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  inoremap <silent><expr> <c-space> coc#refresh()

  inoremap <silent><expr> <Tab> pumvisible()
    \ ? coc#_select_confirm()
    \ : "\<Tab>"

  inoremap <silent><expr> <cr> pumvisible()
    \ ? coc#_select_confirm()
    \ : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  nmap <leader>rn <Plug>(coc-rename)
  nmap <leader>ac <Plug>(coc-codeaction)

  command! -nargs=0 Format :call CocAction('format')
  command! -nargs=? Fold :call CocAction('fold', <f-args>)
  command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

  let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-yaml',
    \ 'coc-tsserver',
    \ 'coc-prettier',
    \ 'coc-eslint',
    \ 'coc-vetur',
    \ 'coc-deno',
    \ 'coc-python',
    \ 'coc-html',
    \ 'coc-emmet',
    \ 'coc-sh',
    \ 'coc-vimlsp',
    \ 'coc-omnisharp',
    \ 'coc-go',
    \ 'coc-rust-analyzer',
    \ 'coc-solargraph',
    \ 'coc-markdownlint',
    \ 'coc-snippets',
    \ ]
'''

[[plugins]]
 repo = 'honza/vim-snippets'
[[plugins]]
 repo = 'ghifarit53/tokyonight-vim'
[[plugins]]
 repo = 'mattn/vim-goimports'
